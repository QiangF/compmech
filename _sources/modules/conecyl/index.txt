=======================================================================
Semi-analytical models for cones and cylinder (:mod:`compmech.conecyl`)
=======================================================================

.. currentmodule:: compmech.conecyl

The ``ConeCyl`` class embodies all the methods and functions necessary to
perform:

* linear static analysis
* linear buckling analysis
* non-linear static analysis

in conical and cylindrical structures.

The implementation focused on laminate composite shells with a constant
laminate constitutive relation. This means that the semi-analtical
models were derived doing an integration using a constant `[F]` for the whole
domain. Recalling that `[F]` correlates the strains and the distributed
stresses by the relation:

.. math::
    \{N\} = [F] \{\varepsilon\}

Basics
======

Defining the geometry
---------------------

Based on the figure:

.. _conecyl_figure:

.. figure:: ../../../figures/conecyl.png
   :align: center
   :scale: 60%

The geometry can be defined using `H`, `R_1` and `\alpha`, for example, or
any other combination (like `L`, `H`, `R_1`) of the geometric parameters
that will allow the complete definition of the cone / cylinder geometry.

**Example**::

    from compmech.conecyl import ConeCyl

    cc = ConeCyl()
    cc.r1 = 400
    cc.r2 = 200
    cc.H = 200

Defining the laminate and the material properties
-------------------------------------------------

The `mapy <https://github.com/saullocastro/mapy>`_
module is internally used to calculate the laminate properties given
the stacking sequence, the thicknesses the material properties.

The **stacking sequence** is passed using a container (``list`` or ``tuple``)
with the orientations of each ply, **from inwards to outwards**::

    cc.stack = [0, 0, -45, +45, -30, +30]

The ply thickness is passed using a single value when all the plies have the
same thickness or using a container with the thickness of each ply::

    cc.plyt = 0.125

**or**::

    cc.plyts = [0.125, 0.125, 0.1, 0.1, 0.101, 0.101]

The material properties are given using a tuple:

.. math::

    (E_{11}, E_{22}, \nu_{12}, G_{12}, G_{13}, G_{23})

where `E_{11}` is the elastic modulus along the direction 1 of the ply,
`E_{22}` the modulus along the direction 2, `\nu_{12}` the Poisson's ratio
and `G_{12}`, `G_{13}`, `G_{23}` the shear modules.

**Example**::

    cc.laminaprop = (123.55e3 , 8.708e3,  0.319, 5.695e3, 5.695e3, 5.695e3)

This will assume the same material properties for each ply. When different
properties must be used the user must supply the ``laminaprops`` container.

**Example**::

    prop1 = (123.55e3 , 8.708e3,  0.319, 5.695e3, 5.695e3, 5.695e3)
    prop2 = (100.2e3 , 4.2e3,  0.2, 5.1e3, 5.1e3, 5.1e3)
    prop3 = (100.2e3 , 4.2e3,  0.2, 5.1e3, 5.1e3, 5.1e3)
    cc.laminaprops = [prop1, prop1, prop2, prop2, prop3, prop3]


Static analysis
---------------

The static analysis is performed with the method:

    cc.static(NLgeom=False)

where ``NLgeom`` is a flag telling whether or not a geometric non-linear
analysis is to be performed.

The solution is stored in the ``cs`` attribute, which consists of a ``list``
of 1-D ``np.ndarray`` objects. For a linear analysis this list will contain
only one entry while for a non-linear analysis it will contain one entry
for each iteration needed up to the convergence or up to the termination
criterion. To access the last result::

    solution = cc.cs[-1]

The displacement field can be plotted, for example::

    cc.plot(solution, vec='w', filename='my_output.png')

Non-linear analysis
-------------------

Using ``NLgeom=True`` in a static analysis will run a geometrically
non-linear analysis. Many attributes of the ``ConeCyl`` object
are used to control the non-linear analysis (see
:py:func:`ConeCyl.static`).

The converged increments used along the non-linear analysis are stored
in the ``increments`` attribute and the corresponding solutions
stored in the ``cs`` attribute (a ``list`` of 1-D ``np.ndarray`` objects).

.. include:: imperfections.rst
